name: Deploy to Aliyun ECS

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ALIYUN_SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.ALIYUN_HOST }} "
            # Cleanup and backup
            echo 'Starting deployment process...'
            sudo mkdir -p /var/www/backups
            if [ -d /var/www/CCL ]; then
              backup_dir=/var/www/backups/CCL_$(date +%Y%m%d%H%M%S)
              echo 'Backing up existing directory to $backup_dir'
              sudo mv /var/www/CCL $backup_dir || {
                echo 'Backup failed, proceeding with cleanup'
                sudo rm -rf /var/www/CCL
              }
            fi

            # Clone repository using SSH
            echo 'Cloning repository...'
            git clone git@github.com:GaLimonkey/CCL.git /var/www/CCL || {
              echo 'Git clone failed!'
              exit 1
            }

            # Set permissions
            echo 'Setting permissions...'
            sudo chown -R www-data:www-data /var/www/CCL
            sudo chmod -R 755 /var/www/CCL

            # Python virtual environment
            echo 'Creating virtual environment...'
            cd /var/www/CCL
            python3 -m venv venv || {
              echo 'Failed to create virtual environment'
              exit 1
            }

            # Install dependencies
            echo 'Installing dependencies...'
            source venv/bin/activate
            if [ ! -f requirements.txt ]; then
              echo 'Creating default requirements.txt'
              echo 'Flask==2.0.1' > requirements.txt
            fi
            pip install --disable-pip-version-check --no-cache-dir -r requirements.txt || {
              echo 'Failed to install dependencies'
              exit 1
            }

            # Systemd service configuration
            echo 'Configuring systemd service...'
            sudo tee /etc/systemd/system/solar_quote.service <<EOF
[Unit]
Description=Solar Quote Service
After=network.target

[Service]
User=www-data
WorkingDirectory=/var/www/CCL
ExecStart=/var/www/CCL/venv/bin/python /var/www/CCL/run.py
Restart=always
RestartSec=5s
Environment="PYTHONPATH=/var/www/CCL"

# Security hardening
PrivateTmp=true
ProtectSystem=full
NoNewPrivileges=true

[Install]
WantedBy=multi-user.target
EOF

            # Enable and start service
            echo 'Starting service...'
            sudo systemctl daemon-reload
            sudo systemctl enable solar_quote
            sudo systemctl restart solar_quote || {
              echo 'Failed to start service'
              journalctl -u solar_quote -b --no-pager | tail -n 20
              exit 1
            }

            # Verify deployment
            echo 'Deployment complete. Service status:'
            systemctl status solar_quote --no-pager
            echo 'Testing endpoint...'
            curl -sSf http://localhost:5000/healthcheck || {
              echo 'Endpoint test failed!'
              journalctl -u solar_quote -b --no-pager | tail -n 20
              exit 1
            }
            echo 'Deployment successful!'
          "
